module Main where

import Listen
import HaskellUnit
import Data.Ratio

main = runTests [t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t25,t26,t27,t28,t29,t30,t31,t32]
t1 = testcase "factorial 1" "(factorial 5) falsch" True (True)
t2 = testcase "isPalindrome 1" "(isPalindrome \"kuebelboek\") falsch" (False)(isPalindrome "kuebelboek")
t3 = testcase "isPalindrome 2" "(isPalindrome \"lagerregal\") falsch" (True)(isPalindrome "lagerregal")
t4 = testcase "isPalindrome 3" "(isPalindrome []) falsch" (True)(isPalindrome ([]::String))
t5 = testcase "isPalindrome 3" "(isPalindrome [42]) falsch" (True)(isPalindrome [42])
t6 = testcase "everyNth 1" "(everyNth 2 [1,2..10]) falsch" ([1,3,5,7,9])(everyNth 2 [1,2..10])
t7 = testcase "everyNth 2" "(everyNth 17 [x]) falsch" ([42])(everyNth 17 [42])
t8 = testcase "everyNth 3" "(everyNth 4 [1,2..10]) falsch" ([1,5,9])(everyNth 4 [1,2..10])
t9 = testcase "everyNth 4" "(everyNth 1 [1,2..10]) falsch" ([1,2..10])(everyNth 1 [1,2..10])
t10 = testcase "swapNeighbours 1" "(swapNeighbours []) falsch" ([])(swapNeighbours ([]::String))
t11 = testcase "swapNeighbours 2" "(swapNeighbours [0,1..10]) falsch" ([1,0,3,2,5,4,7,6,9,8,10])(swapNeighbours [0,1..10])
t12 = testcase "swapNeighbours 3" "(swapNeighbours [1,2,3]) falsch" ([2,1,3])(swapNeighbours [1,2,3])
t13 = testcase "maxRep 1" "(maxRep \"aabbbbccddeeeehhhhhhhhgjgfzvkgjlkj\") falsch" (8)(maxRep "aabbbbccddeeeehhhhhhhhgjgfzvkgjlkj")
t14 = testcase "maxRep 2" "(maxRep []) falsch" (0)(maxRep ([]::String))
t15 = testcase "maxRep 3" "(maxRep [42]) falsch" (1)(maxRep [42])
t16 = testcase "leibniz" "(take 10 leibniz) falsch" ([1%1,(-1)%3,1%5,(-1)%7,1%9,(-1)%11,1%13,(-1)%15,1%17,(-1)%19])(take 10 leibniz)
t17 = testcase "fatio" "(take 10 fatio) falsch" ([1%1,1%3,2%15,2%35,8%315,8%693,16%3003,16%6435,128%109395,128%230945])(take 10 fatio)
t18 = testcase "squaresum" "() falsch" (385)(squaresum [1,2..10])
t19 = testcase "sqx" "() falsch" (4370)(sqx [1,2..19])
t20 = testcase "mittelwerte 1" "() falsch" ([1 % 1,2 % 1,3 % 1,4 % 1,5 % 1,6 % 1,7 % 1,8 % 1,9 % 1,10 % 1,11 % 1,12 % 1,13 % 1,14 % 1,15 % 1,16 % 1,17 % 1,18 % 1,19 % 1,20 % 1,21 % 1,22 % 1,23 % 1,24 % 1,25 % 1,26 % 1,27 % 1,28 % 1,29 % 1,30 % 1,31 % 1,32 % 1,33 % 1,34 % 1,35 % 1,36 % 1,37 % 1,38 % 1,39 % 1,40 % 1,41 % 1,42 % 1,43 % 1,44 % 1,45 % 1,46 % 1,47 % 1,48 % 1,49 % 1,50 % 1,51 % 1])(mittelwerte ([1,3..100]::[Rational]))
t21 = testcase "mittelwerte 2" "() falsch" ([1 % 1,2 % 3,23 % 45,44 % 105,563 % 1575,3254 % 10395,88069 % 315315,11384 % 45045,1593269 % 6891885,15518938 % 72747675,31730711 % 160044885,186088972 % 1003917915,3788707301 % 21751554825,5776016314 % 35137127025,340028535787 % 2183521465125,667903294192 % 4512611027925,10823198495797 % 76714387474725,5476065119726 % 40613499251325,409741429887649 % 3172365552631275,103505656241356 % 834833040166125,17141894231615609 % 143758249516606725,371973541444416706 % 3237983429588332425,750488463554668427 % 6770328989139240525,4445914989628998968 % 41505060324723170175,250947670863258378883 % 2421128518942184926875,126423297595920242354 % 1258986829849936161975,13497714685925233086599 % 138585396424250665214325,3397759546300205690036 % 35929547221102024314825,13681087175729900515319 % 148850981344565529304275,406158467914110781224398 % 4542521327239327359802875,49854167840670803800030081 % 572660521987304535825815775,1567105899814666288359008 % 18472920064106597929865025,50431587564286345811024641 % 609606362115517731685545825,1698694643435645883634257986 % 21040655953017415042116263475,3415326759977018463809109547 % 43318997550329972145533483625,60931471400665863247936933628 % 790881126704595777171311315325,17879865329739387154749952543301 % 237352213692123688237745762521425,8982698829498905052733128661294 % 121883569193252704770734310483975,1640791669937677803334857936583 % 22743823916444284622290134492225,16275714612161633322746754606104 % 230354114025525446815502644216125,392323477462438647500111019022171 % 5666711205027925991661365047716675,16350530548898861505299258082684934 % 240904332447894512279652665321223525,32836021508132677919438657714569433 % 493280299774260191810717362324410075,8241969845074753293800503600142252 % 126187983663182839765532348501593275,2945612899725083339844391313332604737 % 45943897688277024841905186886261915125,1478416205380035812149534507323965606 % 23482436596230479363640428852978312175,2967810641987855859625689130988734537 % 47985848696644892612656528525651333575,186159859534888316151194827805016112 % 3062926512551801656127012459084127675,289941077502330600552030043573079715049 % 4852696571386237757190563406008952946425,1600177849813142835640689687958071032482 % 27234521574106436392396019115356368576875])(mittelwerte$map ((%) 1) [1,3..100])
t22 = testcase "readBinary 10" "(readBinary 10) falsch" 2 (readBinary "10")
t23 = testcase "readBinary 11" "(readBinary 11) falsch" 3 (readBinary "11")
t24 = testcase "readBinary 101010" "(readBinary 101010) falsch" 42 (readBinary "101010")
t25 = testcase "toOctalString 7" "(toOctalString 7) falsch" "7" (toOctalString 7)
t26 = testcase "toOctalString 8" "(toOctalString 8) falsch" "10" (toOctalString 8)
t27 = testcase "toOctalString 65" "(toOctalString 65) falsch" "101" (toOctalString 65)
t28 = testcase "anagram 1" "(anagram leestring) falsch" 0 (length$anagram "")
t29 = testcase "anagram 2" "(anagram aaa) falsch" 1 (length$anagram "aaa")
t30 = testcase "anagram 3" "(anagram aab) falsch" 3 (length$anagram "aab")
t31 = testcase "anagram 4" "(anagram aaaaabbbbb) falsch" 252 (length$anagram "aaaaabbbbb")
t32 = testcase "anagram 5" "(anagram aaaaaaaaaaaaaaaaaaaaaaaaaac) falsch" 27 (length$anagram "aaaaaaaaaaaaaaaaaaaaaaaaaac")

